openapi: 3.1.0
info:
  title: E-Commerce API
  description: |-
    The E-Commerce API provides endpoints to manage customers, orders in an e-commerce system. It allows clients to retrieve customer information, place orders, manage customer accounts, and retrieve order details.
  version: v1
servers:
  - url: http://localhost:8080
    description: local swagger URL
tags:
  - name: ecommerce-resource
    description: ecommerce-resource to manage customers, orders
paths:
  /ecommerce/customer/{customerId}:
    get:
      tags:
        - ecommerce-resource
      summary: Finds customer details
      description: Finds customer details by customer id
      operationId: getCustomer
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRepresentation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    patch:
      tags:
        - ecommerce-resource
      operationId: updateCustomerInfo
      summary: Updates customer information
      description: Updates customer information by customer id, null or empty filed values will not be updated.
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateInfo'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      tags:
        - ecommerce-resource
      operationId: deleteCustomer
      summary: Deletes customer details
      description: Deletes customer details by customer id
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/customer/search/{customerName}:
    get:
      tags:
        - ecommerce-resource
      summary: Searches for customers
      description: Searches for customers by name
      operationId: searchCustomers
      parameters:
        - name: customerName
          in: path
          description: name of a customer to search
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerInfo'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/customer/address/{customerId}:
    put:
      tags:
        - ecommerce-resource
      operationId: updateAddress
      summary: Updates customer address
      description: Updates customer address by customer id, null or empty filed values will not be updated.
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRepresentation'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/placeOrder/{customerId}:
    post:
      tags:
        - ecommerce-resource
      operationId: placeOrderByCustomerId
      summary: Places an order by a customer
      description: Places an order by a customer id in the system
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/customer:
    post:
      tags:
        - ecommerce-resource
      operationId: createCustomer
      summary: Registers a new customer
      description: Registers a new customer in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/orders:
    get:
      tags:
        - ecommerce-resource
      operationId: getAllOrders
      summary: Fetches all orders
      description: Fetches all orders for all customers from the system
      parameters:
        - name: orderStatus
          description: status of an order either active or cancelled
          in: query
          required: true
          schema:
            type: string
            default: active
            enum: [ active, cancelled ]
        - name: pageNo
          description: Page number(it is like a page number in a book)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          description: Page size(number of records fit into a page)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          description: Sort records based on id or orderTime or quantity or status of an order
          in: query
          required: true
          schema:
            type: string
            default: id
            enum: [ id, orderTime, quantity, status ]
        - name: sortDirection
          description: Sort direction either ascending(asc) or descending(desc)
          in: query
          required: true
          schema:
            type: string
            default: asc
            enum: [ asc, desc ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/orders/{customerId}:
    get:
      tags:
        - ecommerce-resource
      operationId: getOrders
      summary: Fetches orders placed by a customer
      description: Fetches orders placed by a customer by customer id from the system
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderRepresentation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/cancelOrder/customer/{customerId}/order/{orderId}:
    delete:
      tags:
        - ecommerce-resource
      operationId: cancelOrder
      summary: Cancels order for a customer by order id
      description: Cancels an order for a specific customer based on the order ID in the system
      parameters:
        - name: customerId
          description: id of a customer
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          description: id of an order
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/customers:
    get:
      tags:
        - ecommerce-resource
      operationId: getAllCustomers
      summary: Fetches all customers details(including associated orders and address)
      description: Fetches all customers details from the system
      parameters:
        - name: pageNo
          description: Page number(it is like a page number in a book)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          description: Page size(number of records fit into a page)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          description: Sort records based on id or firstName of a customer
          in: query
          required: true
          schema:
            type: string
            default: id
            enum: [ id, firstName ]
        - name: sortDirection
          description: Sort direction either ascending(asc) or descending(desc)
          in: query
          required: true
          schema:
            type: string
            default: asc
            enum: [ asc, desc ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /ecommerce/customersInfo:
    get:
      tags:
        - ecommerce-resource
      operationId: getAllCustomersInfo
      summary: Fetches all customers information
      description: Fetches all customers information from the system
      parameters:
        - name: pageNo
          description: Page number(it is like a page number in a book)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          description: Page size(number of records fit into a page)
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          description: Sort records based on id or firstName of a customer
          in: query
          required: true
          schema:
            type: string
            default: id
            enum: [ id, firstName ]
        - name: sortDirection
          description: Sort direction either ascending(asc) or descending(desc)
          in: query
          required: true
          schema:
            type: string
            default: asc
            enum: [ asc, desc ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfoData'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
components:
  schemas:
    AddressRepresentation:
      required:
        - pinCode
      type: object
      properties:
        houseNo:
          type: string
        street:
          type: string
        landmark:
          type: string
        pinCode:
          type: string
          minLength: 2
        city:
          type: string
    CreateCustomerRequest:
      required:
        - contactNumber
        - firstName
        - email
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
        email:
          type: string
          format: email
        contactNumber:
          type: string
          minLength: 2
          maxLength: 25
        address:
          $ref: '#/components/schemas/AddressRepresentation'
    OrderRequest:
      type: object
      properties:
        productName:
          type: string
          minLength: 2
        quantity:
          type: integer
          format: int32
          minimum: 1
        amount:
          type: number
          format: float
          minimum: 0.0
    OrderRepresentation:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        productName:
          type: string
        quantity:
          type: integer
          format: int32
        amount:
          type: number
          format: float
        orderTime:
          type: string
          format: date-time
        customerId:
          type: integer
          format: int64
        status:
          type: string
        cancelledTimestamp:
          type: string
          format: date-time
    CustomerRepresentation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        contactNumber:
          type: string
        address:
          $ref: '#/components/schemas/AddressRepresentation'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderRepresentation'
    CustomerResponse:
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRepresentation'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        isFirst:
          type: boolean
        isLast:
          type: boolean
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean
    CustomerInfoData:
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerInfo'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        isFirst:
          type: boolean
        isLast:
          type: boolean
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean
    OrderResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderRepresentation'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        isFirst:
          type: boolean
        isLast:
          type: boolean
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean
    CustomerInfo:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateInfo'
      type: object
      properties:
        id:
          type: integer
          format: int64
    CustomerUpdateInfo:
      required:
        - email
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        contactNumber:
          type: string
    CustomerError:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
        timestamp:
          type: string
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/CustomerError'
        - type: object
          properties:
            status:
              type: integer
              format: int32
              example: 404
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/CustomerError'
        - type: object
          properties:
            status:
              type: integer
              format: int32
              example: 500
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/CustomerError'
        - type: object
          properties:
            status:
              type: integer
              format: int32
              example: 409
    BadCustomerError:
      allOf:
        - $ref: '#/components/schemas/CustomerError'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties: true
            status:
              type: integer
              format: int32
              example: 400