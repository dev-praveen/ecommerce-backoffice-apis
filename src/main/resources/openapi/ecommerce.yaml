openapi: 3.0.3
info:
  title: E-Commerce API
  description: |-
    The E-Commerce API provides endpoints to manage customers, orders in an e-commerce system. It allows clients to retrieve customer information, place orders, manage customer accounts, and retrieve order details.
  version: v1
servers:
  - url: http://localhost:8080
    description: local swagger URL
tags:
  - name: ecommerce-resource
    description: ecommerce-resource to manage customers, orders
paths:
  /ecommerce/customer/{customerId}:
    get:
      tags:
        - ecommerce-resource
      summary: Finds customer details
      description: Finds customer details by customer id
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRepresentation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
    put:
      tags:
        - ecommerce-resource
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
        required: true
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
    delete:
      tags:
        - ecommerce-resource
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
  /ecommerce/customer/address/{customerId}:
    put:
      tags:
        - ecommerce-resource
      operationId: updateAddress
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRepresentation'
        required: true
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
  /ecommerce/placeOrder/{customerId}:
    post:
      tags:
        - ecommerce-resource
      operationId: placeOrderByCustomerId
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
  /ecommerce/customer:
    post:
      tags:
        - ecommerce-resource
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerError'
  /ecommerce/orders:
    get:
      tags:
        - ecommerce-resource
      operationId: fetchOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderRepresentation'
  /ecommerce/orders/{customerId}:
    get:
      tags:
        - ecommerce-resource
      operationId: getOrders
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderRepresentation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerError'
  /ecommerce/customers:
    get:
      tags:
        - ecommerce-resource
      operationId: getAllCustomers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerRepresentation'
  /ecommerce/customersInfo:
    get:
      tags:
        - ecommerce-resource
      operationId: getAllCustomersInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerInfo'
components:
  schemas:
    AddressRepresentation:
      required:
        - pinCode
      type: object
      properties:
        houseNo:
          type: string
        street:
          type: string
        landmark:
          type: string
        pinCode:
          type: string
        city:
          type: string
    CreateCustomerRequest:
      required:
        - contactNumber
        - firstName
        - email
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        contactNumber:
          type: string
        address:
          $ref: '#/components/schemas/AddressRepresentation'
    OrderRequest:
      type: object
      properties:
        productName:
          type: string
        quantity:
          type: integer
          format: int32
        amount:
          type: number
          format: float
    OrderRepresentation:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        productName:
          type: string
        quantity:
          type: integer
          format: int32
        amount:
          type: number
          format: float
        orderTime:
          type: string
          format: date-time
        customerId:
          type: integer
          format: int64
    CustomerRepresentation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        contactNumber:
          type: string
        address:
          $ref: '#/components/schemas/AddressRepresentation'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderRepresentation'
    CustomerInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        contactNumber:
          type: string
    CustomerError:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
        timestamp:
          type: string
    BadCustomerError:
      allOf:
        - $ref: '#/components/schemas/CustomerError'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties: true